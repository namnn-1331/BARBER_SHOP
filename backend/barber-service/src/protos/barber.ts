// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.20.3
// source: src/protos/barber.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "barber";

export interface GetAllBarberRequest {
}

export interface Barber {
  id: number;
  name: string;
  age: number;
  gender: string;
  description: string;
  img: string;
  active: boolean;
}

export interface GetAllBarberResponse {
  data: Barber[];
}

export const BARBER_PACKAGE_NAME = "barber";

export interface BarberServiceClient {
  getAllBarber(request: GetAllBarberRequest): Observable<GetAllBarberResponse>;
}

export interface BarberServiceController {
  getAllBarber(
    request: GetAllBarberRequest,
  ): Promise<GetAllBarberResponse> | Observable<GetAllBarberResponse> | GetAllBarberResponse;
}

export function BarberServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllBarber"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BarberService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BarberService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BARBER_SERVICE_NAME = "BarberService";
