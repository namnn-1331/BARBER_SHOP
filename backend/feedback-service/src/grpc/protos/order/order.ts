// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.20.3
// source: src/grpc/protos/order/order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface GetListHairStyleRequest {
  ids: number[];
}

export interface HairStyle {
  id: number;
  booking: number;
}

export interface GetListHairStyleResponse {
  hairStyles: HairStyle[];
}

export interface GetListUserFeedbackByOrderIdsRequest {
  orderIds: number[];
}

export interface GetListUserFeedbackByOrderIdsResponse {
  userFeedbacks: UserFeedback[];
}

export interface UserFeedback {
  id: number;
  username: string;
  avatar: string;
  orderId: number;
  hairColor: string;
}

export interface GetListOrderIdByUserIdRequest {
  userId: number;
}

export interface GetListOrderIdByUserIdResponse {
  orderIds: number[];
}

export interface CheckOrderMatchWithUserRequest {
  userId: number;
  orderId: number;
}

export interface CheckOrderMatchWithUserResponse {
  isMatch: boolean;
}

export interface GetOrderByIdRequest {
  id: number;
}

export interface GetOrderByIdResponse {
  id: number;
  hairStyle: string;
  hairColor: string;
  barber: string;
  userId: number;
  orderTime: string;
  cutted: boolean;
  schedule: string;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  getListHairStyle(request: GetListHairStyleRequest): Observable<GetListHairStyleResponse>;

  getListUserFeedbackByOrderIds(
    request: GetListUserFeedbackByOrderIdsRequest,
  ): Observable<GetListUserFeedbackByOrderIdsResponse>;

  getListOrderByUserId(request: GetListOrderIdByUserIdRequest): Observable<GetListOrderIdByUserIdResponse>;

  checkOrderMatchWithUser(request: CheckOrderMatchWithUserRequest): Observable<CheckOrderMatchWithUserResponse>;

  getOrderById(request: GetOrderByIdRequest): Observable<GetOrderByIdResponse>;
}

export interface OrderServiceController {
  getListHairStyle(
    request: GetListHairStyleRequest,
  ): Promise<GetListHairStyleResponse> | Observable<GetListHairStyleResponse> | GetListHairStyleResponse;

  getListUserFeedbackByOrderIds(
    request: GetListUserFeedbackByOrderIdsRequest,
  ):
    | Promise<GetListUserFeedbackByOrderIdsResponse>
    | Observable<GetListUserFeedbackByOrderIdsResponse>
    | GetListUserFeedbackByOrderIdsResponse;

  getListOrderByUserId(
    request: GetListOrderIdByUserIdRequest,
  ):
    | Promise<GetListOrderIdByUserIdResponse>
    | Observable<GetListOrderIdByUserIdResponse>
    | GetListOrderIdByUserIdResponse;

  checkOrderMatchWithUser(
    request: CheckOrderMatchWithUserRequest,
  ):
    | Promise<CheckOrderMatchWithUserResponse>
    | Observable<CheckOrderMatchWithUserResponse>
    | CheckOrderMatchWithUserResponse;

  getOrderById(
    request: GetOrderByIdRequest,
  ): Promise<GetOrderByIdResponse> | Observable<GetOrderByIdResponse> | GetOrderByIdResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getListHairStyle",
      "getListUserFeedbackByOrderIds",
      "getListOrderByUserId",
      "checkOrderMatchWithUser",
      "getOrderById",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
