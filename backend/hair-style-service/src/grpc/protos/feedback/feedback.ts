// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.20.3
// source: src/protos/feedback.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'feedback';

export interface HairStyle {
  id: number;
  rating: string;
}

export interface GetListHairStyleRequest {
  ids: number[];
}

export interface GetListHairStyleResponse {
  hairStyles: HairStyle[];
}

export const FEEDBACK_PACKAGE_NAME = 'feedback';

export interface FeedbackServiceClient {
  getListHairStyle(
    request: GetListHairStyleRequest,
  ): Observable<GetListHairStyleResponse>;
}

export interface FeedbackServiceController {
  getListHairStyle(
    request: GetListHairStyleRequest,
  ):
    | Promise<GetListHairStyleResponse>
    | Observable<GetListHairStyleResponse>
    | GetListHairStyleResponse;
}

export function FeedbackServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getListHairStyle'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('FeedbackService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('FeedbackService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const FEEDBACK_SERVICE_NAME = 'FeedbackService';
